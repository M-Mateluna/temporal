/* ===================== PARCHE FECHA/HORA ===================== */
/* Normaliza cadenas “YYYY-MM-DD HH:MM:SS(.ffff)” -> “YYYY-MM-DDTHH:MM” */
function normalizeDBDateToDatetimeLocal(v){
  if (!v) return '';
  const m = String(v).match(/^(\d{4}-\d{2}-\d{2})[ T](\d{2}):(\d{2})/);
  return m ? (m[1] + 'T' + m[2] + ':' + m[3]) : '';
}

/* Intercepta cualquier asignación a value para #fechahora y corrige
   antes de que el navegador valide (evita el warning y no pierde el dato) */
(function patchDatetimeLocalSetter(){
  const desc = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');
  if (!desc || !desc.set || !desc.get) return;
  const originalSet = desc.set;
  const originalGet = desc.get;

  Object.defineProperty(HTMLInputElement.prototype, 'value', {
    get: function(){ return originalGet.call(this); },
    set: function(v){
      if (this && this.id === 'fechahora' && this.type === 'datetime-local' && typeof v === 'string') {
        const fixed = normalizeDBDateToDatetimeLocal(v);
        if (fixed) { originalSet.call(this, fixed); return; }
      }
      originalSet.call(this, v);
    }
  });
})();
/* ============================================================= */

/* ====== cerrar Lightbox (compat) ====== */
function cerrarLightbox() {
  let root = (window.parent && window.parent !== window) ? window.parent : window;
  if (typeof root.OcultarVentana === 'function') return root.OcultarVentana();
  if (root.Accion && root.Accion.ventana && typeof root.Accion.ventana.OcultarVentana === 'function')
    return root.Accion.ventana.OcultarVentana();
  if (window.lightbox && typeof window.lightbox.OcultarVentana === 'function')
    return window.lightbox.OcultarVentana();
}

/* ====== ClienteProveedor2 ====== */
let clienteproveedor = new ClienteProveedor2();

clienteproveedor.ubicacion = document.getElementById("divBuscador");
clienteproveedor.creaBotonBuscar = true;
clienteproveedor.creaBotonBorrar = true;
clienteproveedor.creaBotonCrear  = true;

clienteproveedor.elementoBuscador = "rut";
clienteproveedor.islightbox = true;
clienteproveedor.altoLightbox = 500;
clienteproveedor.anchoLightbox = 800;

clienteproveedor.filtro = "cliente|vigente|puedefacturar";
clienteproveedor.tituloGrilla = "Clientes vigentes facturando";

clienteproveedor.elementos = {
  rut: document.getElementById("rut"),
  idclienteproveedor: document.getElementById("idclienteproveedor"),
  giro: document.getElementById("giro"),
  idusuario: document.getElementById("idusuario"),
  fechahora: document.getElementById("fechahora")
};

/* ====== AfterEvent ======
   - Ya no ponemos “hoy”.
   - No intentamos leer el “crudo” luego, porque el setter ya lo corrige
     en el momento que lo asigna el componente.
*/
clienteproveedor.afterEvent = function(self) {
  // Mensajes y bloqueos según evento
  if (self.ultimoEvento === "onkeypress") {
    self.elementos.idusuario.disabled = true;
    self.elementos.giro.disabled = true;

    MSGBOX.Abrir({
      titulo: 'AfterEvent',
      texto: 'Se ha desencadenado el evento <b>Onkeypress</b>, bloqueando <b>idusuario</b> y <b>giro</b>.',
      botonera: 1,
      fnretorno: 'retGenerico',
      conCerrar: false
    });
  } else {
    self.elementos.rut.disabled = true;
    self.elementos.giro.disabled = true;
    self.elementos.idusuario.disabled = true;

    MSGBOX.Abrir({
      titulo: 'AfterEvent',
      texto: 'Se ha desencadenado el evento <b>Onclick</b>, bloqueando <b>rut</b>, <b>giro</b> y <b>idusuario</b>.',
      botonera: 1,
      fnretorno: 'retGenerico',
      conCerrar: false
    });
  }

  // Cerrar el lightbox después de volcar los datos
  setTimeout(cerrarLightbox, 0);
};

clienteproveedor.New();
