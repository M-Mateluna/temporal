CREATE OR REPLACE FUNCTION ejerfuncion.fn_gestionar_persona(
  INTEGER,   -- $1 = idpersona
  TEXT,      -- $2 = nombre
  TEXT,      -- $3 = apellidos
  INTEGER    -- $4 = idprofesion
)
RETURNS TEXT AS
$$
DECLARE
  -- alias de par치metros
  _idpersona    ALIAS FOR $1;
  _nombre       ALIAS FOR $2;
  _apellidos    ALIAS FOR $3;
  _idprofesion  ALIAS FOR $4;

  -- internas
  __id       INT;
  __existe   INT;
  __dup      INT;
  __touched  INT;
BEGIN
  -- validaciones b치sicas
  IF _nombre IS NULL OR LENGTH(TRIM(_nombre)) = 0 THEN
    RAISE EXCEPTION 'NOMBRE OBLIGATORIO';
  END IF;
  IF _apellidos IS NULL OR LENGTH(TRIM(_apellidos)) = 0 THEN
    RAISE EXCEPTION 'APELLIDOS OBLIGATORIOS';
  END IF;

  -- profesion existente
  SELECT COUNT(*) INTO __existe
  FROM ejerfuncion.profesion
  WHERE idprofesion = _idprofesion;
  IF __existe = 0 THEN
    RAISE EXCEPTION 'IDPROFESION % NO EXISTE', _idprofesion;
  END IF;

  -- inserci칩n
  IF _idpersona = 0 THEN
    SELECT COUNT(*) INTO __dup
    FROM ejerfuncion.persona
    WHERE LOWER(TRIM(nombre))    = LOWER(TRIM(_nombre))
      AND LOWER(TRIM(apellidos)) = LOWER(TRIM(_apellidos));
    IF __dup > 0 THEN
      RAISE EXCEPTION 'YA EXISTE UNA PERSONA CON EL MISMO NOMBRE Y APELLIDOS'
        USING ERRCODE = 'unique_violation';
    END IF;

    INSERT INTO ejerfuncion.persona (nombre, apellidos, idprofesion, fechahora)
    VALUES (TRIM(_nombre), TRIM(_apellidos), _idprofesion, NOW())
    RETURNING idpersona INTO __id;

    RETURN 'INSERTADO: idpersona=' || __id::TEXT;
  END IF;

  -- actualizaci칩n
  SELECT COUNT(*) INTO __existe
  FROM ejerfuncion.persona
  WHERE idpersona = _idpersona;
  IF __existe = 0 THEN
    RAISE EXCEPTION 'IDPERSONA % NO EXISTE', _idpersona;
  END IF;

  SELECT COUNT(*) INTO __dup
  FROM ejerfuncion.persona
  WHERE LOWER(TRIM(nombre))    = LOWER(TRIM(_nombre))
    AND LOWER(TRIM(apellidos)) = LOWER(TRIM(_apellidos))
    AND idpersona <> _idpersona;
  IF __dup > 0 THEN
    RAISE EXCEPTION 'YA EXISTE OTRA PERSONA CON EL MISMO NOMBRE Y APELLIDOS'
      USING ERRCODE = 'unique_violation';
  END IF;

  UPDATE ejerfuncion.persona
     SET nombre      = TRIM(_nombre),
         apellidos   = TRIM(_apellidos),
         idprofesion = _idprofesion,
         fechahora   = NOW()
   WHERE idpersona   = _idpersona;

  GET DIAGNOSTICS __touched = ROW_COUNT;
  IF __touched = 0 THEN
    RAISE EXCEPTION 'NO SE ACTUALIZO NINGUN REGISTRO (IDPERSONA %)', _idpersona;
  END IF;

  RETURN 'ACTUALIZADO: idpersona=' || _idpersona::TEXT;
END;
$$ LANGUAGE plpgsql VOLATILE;
