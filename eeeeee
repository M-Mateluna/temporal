/* ===================== MSGBOX (wrapper) ===================== */
/* Implementación tomada de tu ejercicio de MessageBox */
let MSGBOX = {
  ventana: undefined,

  initialize: function() {
    this.ventana = new IU_MSGBOX();
  },

  Abrir: function(conf) {
    this.ventana.titulo = conf.titulo || 'Aviso';
    let texto = conf.texto || '';
    this.ventana.texto = '<center>' + texto + '</center>';

    // 1: Aceptar | 2: Aceptar/Cancelar | 3: Sí/No | 4: Sí/No/Cancelar | 5: Imprimir/Cancelar | 6: Aceptar/Cancelar/Anular
    this.ventana.botonera = (conf.botonera != null) ? conf.botonera : 1;

    this.ventana.conCerrar = (conf.conCerrar != undefined) ? conf.conCerrar : this.ventana.conCerrar;
    this.ventana.fnretorno = conf.fnretorno || 'retGenerico';
    if (conf.titulocss) this.ventana.titulocss = conf.titulocss;

    // base de rutas (la expone index.php)
    this.ventana.url = (typeof window.POS_BASE !== 'undefined') ? window.POS_BASE : '';

    this.ventana.top = conf.top || '25%';
    this.ventana.objeto = conf.objeto || {};

    this.ventana.Messagebox();
    this.ventana.zzIndex = 2;
  }
};
MSGBOX.initialize();

/* Cierra el messagebox para cualquier botonera (A, C, S, N, …) */
function retGenerico(resp){
  if (MSGBOX && MSGBOX.ventana && typeof MSGBOX.ventana.HideInfo === 'function') {
    MSGBOX.ventana.HideInfo();
  }
}
/* =========================================================== */


/* ================== PARCHE FECHA/HORA ================== */
/* Normaliza “YYYY-MM-DD HH:MM:SS(.ffff)” -> “YYYY-MM-DDTHH:MM” */
function normalizeDBDateToDatetimeLocal(v){
  if (!v) return '';
  const m = String(v).match(/^(\d{4}-\d{2}-\d{2})[ T](\d{2}):(\d{2})/);
  return m ? (m[1] + 'T' + m[2] + ':' + m[3]) : '';
}

/* Intercepta asignaciones a value en #fechahora para evitar warnings */
(function patchDatetimeLocalSetter(){
  const desc = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');
  if (!desc || !desc.set || !desc.get) return;
  const originalSet = desc.set;
  const originalGet = desc.get;

  Object.defineProperty(HTMLInputElement.prototype, 'value', {
    get: function(){ return originalGet.call(this); },
    set: function(v){
      if (this && this.id === 'fechahora' && this.type === 'datetime-local' && typeof v === 'string') {
        const fixed = normalizeDBDateToDatetimeLocal(v);
        if (fixed) { originalSet.call(this, fixed); return; }
      }
      originalSet.call(this, v);
    }
  });
})();
/* ======================================================= */


/* ====== cerrar Lightbox (compat) ====== */
function cerrarLightbox() {
  let root = (window.parent && window.parent !== window) ? window.parent : window;
  if (typeof root.OcultarVentana === 'function') return root.OcultarVentana();
  if (root.Accion && root.Accion.ventana && typeof root.Accion.ventana.OcultarVentana === 'function')
    return root.Accion.ventana.OcultarVentana();
  if (window.lightbox && typeof window.lightbox.OcultarVentana === 'function')
    return window.lightbox.OcultarVentana();
}

/* ====== ClienteProveedor2 ====== */
let clienteproveedor = new ClienteProveedor2();

clienteproveedor.ubicacion = document.getElementById("divBuscador");
clienteproveedor.creaBotonBuscar = true;
clienteproveedor.creaBotonBorrar = true;
clienteproveedor.creaBotonCrear  = true;

clienteproveedor.elementoBuscador = "rut";
clienteproveedor.islightbox = true;
clienteproveedor.altoLightbox = 500;
clienteproveedor.anchoLightbox = 800;

clienteproveedor.filtro = "cliente|vigente|puedefacturar";
clienteproveedor.tituloGrilla = "Clientes vigentes facturando";

clienteproveedor.elementos = {
  rut: document.getElementById("rut"),
  idclienteproveedor: document.getElementById("idclienteproveedor"),
  giro: document.getElementById("giro"),
  idusuario: document.getElementById("idusuario"),
  fechahora: document.getElementById("fechahora")
};

/* ====== AfterEvent ====== */
clienteproveedor.afterEvent = function(self) {
  // Nota: no seteamos “hoy”; el setter anterior normaliza lo que venga del componente

  if (self.ultimoEvento === "onkeypress") {
    self.elementos.idusuario.disabled = true;
    self.elementos.giro.disabled = true;

    MSGBOX.Abrir({
      titulo: 'AfterEvent',
      texto: 'Se ha desencadenado el evento <b>Onkeypress</b>, bloqueando <b>idusuario</b> y <b>giro</b>.',
      botonera: 1,
      fnretorno: 'retGenerico',
      conCerrar: false
    });
  } else {
    self.elementos.rut.disabled = true;
    self.elementos.giro.disabled = true;
    self.elementos.idusuario.disabled = true;

    MSGBOX.Abrir({
      titulo: 'AfterEvent',
      texto: 'Se ha desencadenado el evento <b>Onclick</b>, bloqueando <b>rut</b>, <b>giro</b> y <b>idusuario</b>.',
      botonera: 1,
      fnretorno: 'retGenerico',
      conCerrar: false
    });
  }

  // Cerrar lightbox cuando ya volcó los datos
  setTimeout(cerrarLightbox, 0);
};

clienteproveedor.New();
