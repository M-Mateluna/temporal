/* ====== CONFIG ====== */
let COMMAND_PATH = 'form/trainig/MessageBox/Ejercicio2/command.php'; // ajusta si tu carpeta difiere

let BD = new BASE();
BD.commandFile = COMMAND_PATH;

/* ====== MSGBOX WRAPPER ====== */
let MSGBOX = {
  ventana: undefined,
  initialize: function(){ this.ventana = new IU_MSGBOX(); },
  Abrir: function(conf){
    this.ventana.titulo    = conf.titulo || 'Aviso';
    let texto              = conf.texto || '';
    this.ventana.texto     = '<center>' + texto + '</center>';
    this.ventana.botonera  = (conf.botonera != null) ? conf.botonera : 1;
    this.ventana.conCerrar = (conf.conCerrar != undefined) ? conf.conCerrar : this.ventana.conCerrar;
    this.ventana.fnretorno = conf.fnretorno || 'retGen';
    this.ventana.titulocss = conf.titulocss || 'tituloazulmsgbox';
    this.ventana.url       = posicion;      // base absoluta (inyectada en index.php)
    this.ventana.top       = '25%';
    this.ventana.objeto    = conf.objeto || {};
    this.ventana.Messagebox();
    this.ventana.zzIndex   = 2;
  }
};
MSGBOX.initialize();

/* ====== HELPERS ====== */
function textOf(node) {
  try { return unescape(node.firstChild.nodeValue); } catch(e) { return ''; }
}

function getTag(rec, tag) {
  try {
    let n = rec.getElementsByTagName(tag)[0];
    return n ? textOf(n) : '';
  } catch (e) { return ''; }
}

function getByIndex(rec, idx) {
  try {
    // childNodes incluye text nodes a veces; filtramos por nodeType 1 (element)
    let els = [];
    for (let k = 0; k < rec.childNodes.length; k++) {
      if (rec.childNodes[k].nodeType === 1) els.push(rec.childNodes[k]);
    }
    return els[idx] ? textOf(els[idx]) : '';
  } catch(e) { return ''; }
}

/* ====== LISTAR ====== */
function cargarTabla() {
  let RS = BD.send('cmd=listar');

  // Diagnóstico
  if (!RS || !RS.data) {
    alert('No llegó XML desde database/class.php.\nRevisa BD.commandFile:\n' + BD.commandFile);
    console.log('RS:', RS);
    return;
  }
  if (RS.error && RS.error.trim() !== '') {
    alert('Error: ' + RS.error);
    console.log('RS.error:', RS.error, 'RS:', RS);
    return;
  }

  let tbody = document.getElementById('tbody-personas');
  tbody.innerHTML = '';

  // Usamos el XML directamente para ser más robustos con nombres de tags
  let tableNode = RS.data; // <table ...>
  let records   = tableNode.getElementsByTagName('record');
  let n         = records.length;

  if (n === 0) {
    let tr = document.createElement('tr');
    tr.innerHTML = '<td colspan="4" style="text-align:center;color:#666;padding:14px">Sin registros</td>';
    tbody.appendChild(tr);
    return;
  }

  for (let i = 0; i < n; i++) {
    let rec = records[i];

    // Leemos por alias esperados…
    let id        = getTag(rec, 'idpersona');
    let nombre    = getTag(rec, 'nombre');
    let apellidos = getTag(rec, 'apellidos');
    let fechahora = getTag(rec, 'fechahora');

    // …y si no vienen con esos nombres, hacemos fallback por índice (0:id, 1:nombre, 2:apellidos, 3:fechahora)
    if (nombre === '' && apellidos === '' && fechahora === '') {
      // Ajusta los índices si tu SELECT cambia de orden
      id        = id || getByIndex(rec, 0);
      nombre    = nombre || getByIndex(rec, 1);
      apellidos = apellidos || getByIndex(rec, 2);
      fechahora = fechahora || getByIndex(rec, 3);
    }

    let tr = document.createElement('tr');
    tr.innerHTML =
      '<td>' + nombre + '</td>' +
      '<td>' + apellidos + '</td>' +
      '<td>' + fechahora + '</td>' +
      '<td><button class="btn-danger" data-id="'+id+'" data-nombre="'+(nombre+' '+apellidos).trim()+'">Eliminar</button></td>';
    tbody.appendChild(tr);
  }

  bindEliminar();
}

function bindEliminar() {
  let botones = document.querySelectorAll('button.btn-danger[data-id]');
  for (let i = 0; i < botones.length; i++) {
    botones[i].onclick = function() {
      let id  = this.getAttribute('data-id');
      let nom = this.getAttribute('data-nombre') || '';
      MSGBOX.Abrir({
        titulocss: 'tituloazulmsgbox',
        titulo: 'Eliminar Registro',
        texto: '&#191;Est&aacute; seguro de eliminar el registro seleccionado?<br><b>'+nom+'</b>',
        botonera: 3,            // Sí / No
        conCerrar: false,
        fnretorno: 'retEliminar',
        objeto: { idpersona: id }
      });
    };
  }
}

/* ====== ELIMINAR ====== */
function retEliminar(resp) {
  if (resp === 'S') {
    let id = MSGBOX.ventana.objeto.idpersona;
    MSGBOX.ventana.HideInfo();

    let RS = BD.send('cmd=eliminar&idpersona=' + encodeURIComponent(id));
    if (!RS || !RS.data) {
      alert('No llegó respuesta del UPDATE.\nRevisa BD.commandFile:\n' + BD.commandFile);
      console.log('RS eliminar:', RS);
      return;
    }
    if (RS.error && RS.error.trim() !== '') {
      alert('Error: ' + RS.error);
      console.log('RS.error eliminar:', RS.error, 'RS:', RS);
      return;
    }

    MSGBOX.Abrir({
      titulocss: 'tituloazulmsgbox',
      titulo: 'Informaci&oacute;n',
      texto: 'Registro eliminado correctamente',
      botonera: 1,
      fnretorno: 'retInfoOk'
    });
  } else {
    MSGBOX.ventana.HideInfo(); // No
  }
}

function retInfoOk(resp) {
  MSGBOX.ventana.HideInfo();
  cargarTabla();
}

function retGen(resp) {
  MSGBOX.ventana.HideInfo();
}

/* ====== INIT ====== */
if (document.readyState !== 'loading') cargarTabla();
else document.addEventListener('DOMContentLoaded', cargarTabla);
