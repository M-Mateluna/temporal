/* Ejercicio ClienteProveedor2 - Modo ventana
   Cumple con: filtros, afterEvent, MSGBOX y formato de fecha correcto */

let clienteproveedor;

window.onload = function () {
  // Formatear fecha/hora actual correctamente (YYYY-MM-DDThh:mm)
  function formatoFechaLocal(date) {
    const pad = n => (n < 10 ? '0' + n : n);
    return (
      date.getFullYear() + '-' +
      pad(date.getMonth() + 1) + '-' +
      pad(date.getDate()) + 'T' +
      pad(date.getHours()) + ':' +
      pad(date.getMinutes())
    );
  }

  // Asignar fecha/hora actual al cargar
  const fh = document.getElementById('fechahora');
  if (fh && !fh.value) fh.value = formatoFechaLocal(new Date());

  // Instancia del componente
  clienteproveedor = new ClienteProveedor2();

  // Dónde se mostrará el buscador (botones lupa/crear/borrar)
  clienteproveedor.ubicacion = document.getElementById("divBuscador");

  // Campo que actúa como buscador
  clienteproveedor.elementoBuscador = "rut";

  // Campos asociados
  clienteproveedor.elementos = {
    rut: document.getElementById("rut"),
    idclienteproveedor: document.getElementById("cliente2"),
    giro: document.getElementById("giro"),
    idusuario: document.getElementById("idusuario"),
    fechahora: document.getElementById("fechahora")
  };

  // Mostrar los 3 botones del buscador
  clienteproveedor.creaBotonBuscar = true;
  clienteproveedor.creaBotonBorrar = true;
  clienteproveedor.creaBotonCrear  = true;

  // Filtro y título del buscador
  clienteproveedor.filtro = "cliente|vigente|puedefacturar";
  clienteproveedor.tituloGrilla = "Clientes vigentes facturando";

  // Modo ventana (no lightbox)
  clienteproveedor.islightbox = false;
  clienteproveedor.alto = 500;
  clienteproveedor.ancho = 800;

  // AfterEvent
  clienteproveedor.afterEvent = function (self) {
    // Asignar fecha actual si está vacío
    if (self.elementos.fechahora && !self.elementos.fechahora.value)
      self.elementos.fechahora.value = formatoFechaLocal(new Date());

    // Diferenciar tipo de evento
    if (self.ultimoEvento === "onkeypress") {
      self.elementos.idusuario.disabled = true;
      self.elementos.giro.disabled = true;

      MSGBOX.Abrir({
        titulo: 'AfterEvent',
        texto: 'Se ha desencadenado el evento <b>Onkeypress</b>, bloqueando <b>idusuario</b> y <b>giro</b>.',
        botonera: 1
      });
    } else if (self.ultimoEvento === "onclick") {
      self.elementos.rut.disabled = true;
      self.elementos.giro.disabled = true;
      self.elementos.idusuario.disabled = true;

      MSGBOX.Abrir({
        titulo: 'AfterEvent',
        texto: 'Se ha desencadenado el evento <b>Onclick</b>, bloqueando <b>rut</b>, <b>giro</b> y <b>idusuario</b>.',
        botonera: 1
      });
    }
  };

  // Inicializar el componente
  clienteproveedor.New();
};
