/* controlador.js — ClienteProveedor2 con Lightbox y AfterEvent */

let clienteproveedor;

window.onload = function () {
  // 0) Lightbox markup (según guía de Lightbox)
  if (typeof addLightboxMarkup === 'function') addLightboxMarkup(); // :contentReference[oaicite:7]{index=7}

  // 1) Fecha/Hora por defecto
  let fh = document.getElementById('fechahora');
  if (fh && !fh.value) {
    let d = new Date(); d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
    fh.value = d.toISOString().slice(0,16);
  }

  // 2) Instancia y setup del componente (según ClienteProveedor2)
  clienteproveedor = new ClienteProveedor2(); // :contentReference[oaicite:8]{index=8}

  // Dónde dibuja Lupa/Crear/Borrar
  clienteproveedor.ubicacion = document.getElementById("divBuscador"); // :contentReference[oaicite:9]{index=9}

  // Campo de búsqueda (Rut)
  clienteproveedor.elementoBuscador = "rut"; // :contentReference[oaicite:10]{index=10}

  // Mapear campos donde volcar la data
  clienteproveedor.elementos = {           // :contentReference[oaicite:11]{index=11}
    rut: document.getElementById("rut"),
    idclienteproveedor: document.getElementById("cliente2"),
    giro: document.getElementById("giro"),
    idusuario: document.getElementById("idusuario"),
    fechahora: document.getElementById("fechahora")
  };

  // Botones visibles
  clienteproveedor.creaBotonBuscar = true; // :contentReference[oaicite:12]{index=12}
  clienteproveedor.creaBotonBorrar = true; // :contentReference[oaicite:13]{index=13}
  clienteproveedor.creaBotonCrear  = true; // :contentReference[oaicite:14]{index=14}

  // Filtro y título (solo CLIENTE + VIGENTE + PUEDER FACTURAR)
  clienteproveedor.filtro = "cliente|vigente|puedefacturar"; // campos válidos de filtro :contentReference[oaicite:15]{index=15}
  clienteproveedor.tituloGrilla = "Clientes vigentes facturando";

  // 3) Forzar Lightbox y tamaño ANTES de New()
  clienteproveedor.islightbox   = true;  // abre en modal (requiere import LB) :contentReference[oaicite:16]{index=16}
  clienteproveedor.altoLightbox = 500;
  clienteproveedor.anchoLightbox= 800;

  // 4) AfterEvent según origen (usa self.ultimoEvento como en Ejemplo 6)
  clienteproveedor.afterEvent = function (self) { // :contentReference[oaicite:17]{index=17}
    // Asegurar fechahora si está vacío
    try {
      let f = self.elementos.fechahora;
      if (f && !f.value) {
        let d = new Date(); d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
        f.value = d.toISOString().slice(0,16);
      }
    } catch(e){}

    if (self.ultimoEvento == "onkeypress") {
      // Deshabilitar ID Usuario y Giro
      self.elementos.idusuario.disabled = true;
      self.elementos.giro.disabled = true;

      MSGBOX.Abrir({
        titulo: 'AfterEvent',
        texto: 'Se ha desencadenado el evento <b>Onkeypress</b>, bloqueando <b>idusuario</b> y <b>giro</b>.',
        botonera: 1
      });
    } else { // onclick
      // Deshabilitar Rut, Giro e Idusuario
      self.elementos.rut.disabled = true;
      self.elementos.giro.disabled = true;
      self.elementos.idusuario.disabled = true;

      MSGBOX.Abrir({
        titulo: 'AfterEvent',
        texto: 'Se ha desencadenado el evento <b>Onclick</b>, bloqueando <b>rut</b>, <b>giro</b> y <b>idusuario</b>.',
        botonera: 1
      });
    }
  };

  // 5) Construir componente
  clienteproveedor.New(); // :contentReference[oaicite:18]{index=18}
};
