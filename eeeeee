case 'listarRegiones':
    $sql = "SELECT idregion, nombre FROM region ORDER BY nombre ASC";
    $result    = pg_query_params($conn, $sql, array());
    $lastError = pg_last_error($conn);

    $obj = array();
    if ($lastError) {
        $obj[] = array("error" => $lastError);
    } else {
        while ($row = pg_fetch_object($result)) {
            $obj[] = array(
                "idregion" => (int)$row->idregion,
                "nombre"   => $row->nombre
            );
        }
    }
    echo json_encode($obj);
    break;

case 'listarComunas':
    $idregion = isset($_GET['idregion']) ? (int)$_GET['idregion'] : 0;
    $sql = "SELECT idcomuna, nombre FROM comuna WHERE idregion = $1 ORDER BY nombre ASC";
    $result    = pg_query_params($conn, $sql, array($idregion));
    $lastError = pg_last_error($conn);

    $obj = array();
    if ($lastError) {
        $obj[] = array("error" => $lastError);
    } else {
        while ($row = pg_fetch_object($result)) {
            $obj[] = array(
                "idcomuna" => (int)$row->idcomuna,
                "nombre"   => $row->nombre
            );
        }
    }
    echo json_encode($obj);
    break;

case 'listarProfesiones':
    $sql = "SELECT idprofesion, nombre FROM profesion ORDER BY nombre ASC";
    $result    = pg_query_params($conn, $sql, array());
    $lastError = pg_last_error($conn);

    $obj = array();
    if ($lastError) {
        $obj[] = array("error" => $lastError);
    } else {
        while ($row = pg_fetch_object($result)) {
            $obj[] = array(
                "idprofesion" => (int)$row->idprofesion,
                "nombre"      => $row->nombre
            );
        }
    }
    echo json_encode($obj);
    break;

case 'listarPersonas':
    $sql = "
      SELECT p.idpersona, p.nombre, p.apellidos,
             p.idregion, r.nombre AS region,
             p.idcomuna, c.nombre AS comuna,
             p.idprofesion, pr.nombre AS profesion
        FROM persona p
        INNER JOIN region    r  ON r.idregion     = p.idregion
        INNER JOIN comuna    c  ON c.idcomuna     = p.idcomuna
        INNER JOIN profesion pr ON pr.idprofesion = p.idprofesion
       ORDER BY p.idpersona DESC";
    $result    = pg_query_params($conn, $sql, array());
    $lastError = pg_last_error($conn);

    $obj = array();
    if ($lastError) {
        $obj[] = array("error" => $lastError);
    } else {
        while ($row = pg_fetch_object($result)) {
            $obj[] = array(
                "idpersona"   => (int)$row->idpersona,
                "nombre"      => $row->nombre,
                "apellidos"   => $row->apellidos,
                "idregion"    => (int)$row->idregion,
                "region"      => $row->region,
                "idcomuna"    => (int)$row->idcomuna,
                "comuna"      => $row->comuna,
                "idprofesion" => (int)$row->idprofesion,
                "profesion"   => $row->profesion
            );
        }
    }
    echo json_encode($obj);
    break;

case 'buscarPersona':
    $id = isset($_GET['idpersona']) ? (int)$_GET['idpersona'] : 0;
    $sql = "SELECT idpersona, nombre, apellidos, idregion, idcomuna, idprofesion
              FROM persona WHERE idpersona = $1";
    $result    = pg_query_params($conn, $sql, array($id));
    $lastError = pg_last_error($conn);

    $obj = array();
    if ($lastError) {
        $obj[] = array("error" => $lastError);
    } else {
        $row = pg_fetch_object($result);
        if ($row) {
            $obj[] = array(
                "idpersona"   => (int)$row->idpersona,
                "nombre"      => $row->nombre,
                "apellidos"   => $row->apellidos,
                "idregion"    => (int)$row->idregion,
                "idcomuna"    => (int)$row->idcomuna,
                "idprofesion" => (int)$row->idprofesion
            );
        } else {
            $obj[] = array("error" => "Persona no encontrada");
        }
    }
    echo json_encode($obj);
    break;

case 'guardarPersona':
    $idpersona   = isset($_POST['idpersona']) ? (int)$_POST['idpersona'] : 0;
    $nombre      = trim($_POST['nombre']);
    $apellidos   = trim($_POST['apellidos']);
    $idregion    = (int)$_POST['idregion'];
    $idcomuna    = (int)$_POST['idcomuna'];
    $idprofesion = (int)$_POST['idprofesion'];

    // Unicidad nombre+apellidos
    $sqlDup = "SELECT COUNT(*)::INT AS n
                 FROM persona
                WHERE LOWER(TRIM(nombre)) = LOWER(TRIM($1))
                  AND LOWER(TRIM(apellidos)) = LOWER(TRIM($2))
                  AND ($3 = 0 OR idpersona <> $3)";
    $resultDup = pg_query_params($conn, $sqlDup, array($nombre, $apellidos, $idpersona));
    $rowDup    = pg_fetch_object($resultDup);
    $dup       = (int)$rowDup->n;

    if ($dup > 0) {
        echo json_encode(array("success"=>false, "error"=>"Ya existe una persona con el mismo nombre y apellidos"));
        break;
    }

    if ($idpersona === 0) {
        // INSERT
        $sql = "INSERT INTO persona (nombre, apellidos, idregion, idcomuna, idprofesion, fechahora)
                VALUES ($1,$2,$3,$4,$5, NOW()) RETURNING idpersona";
        $params = array($nombre,$apellidos,$idregion,$idcomuna,$idprofesion);
    } else {
        // UPDATE
        $sql = "UPDATE persona
                   SET nombre=$2, apellidos=$3, idregion=$4, idcomuna=$5, idprofesion=$6, fechahora=NOW()
                 WHERE idpersona=$1
             RETURNING idpersona";
        $params = array($idpersona,$nombre,$apellidos,$idregion,$idcomuna,$idprofesion);
    }

    $result    = pg_query_params($conn, $sql, $params);
    $lastError = pg_last_error($conn);

    if ($lastError) {
        echo json_encode(array("success"=>false, "error"=>$lastError));
    } else {
        $row   = pg_fetch_object($result);
        $idRes = (int)$row->idpersona;
        echo json_encode(array(
            "success"   => true,
            "message"   => ($idpersona===0 ? "Insertado" : "Actualizado"),
            "idpersona" => $idRes
        ));
    }
    break;
