CREATE OR REPLACE FUNCTION trainingmmateluna.fn_reserva_iu(
  _idreserva     INT,
  _rut           VARCHAR,
  _nombre        VARCHAR(100),
  _nombremascota VARCHAR(100),
  _email         VARCHAR,
  _idregion      INT,
  _idcomuna      INT,
  _fecha         DATE,       -- <- ahora DATE
  _idhorario     INT,
  _recordatorio  BOOLEAN,
  _web           BOOLEAN,
  _tv            BOOLEAN,
  _amigos        BOOLEAN
)
RETURNS TABLE(idreserva INT, mensaje TEXT)
LANGUAGE plpgsql
VOLATILE
AS
$$
DECLARE
  __tiene_choque INT;
  __dup_rut INT;
  __medios INT := 0;
  __es_insert BOOLEAN;
BEGIN
  -- AL MENOS 2 MEDIOS
  IF _web THEN __medios := __medios + 1; END IF;
  IF _tv THEN __medios := __medios + 1; END IF;
  IF _amigos THEN __medios := __medios + 1; END IF;
  IF __medios < 2 THEN
    RAISE EXCEPTION 'DEBE SELECCIONAR AL MENOS DOS MEDIOS (WEB/TV/AMIGOS)';
  END IF;

  -- CHOQUE MISMO DÍA + MISMO HORARIO
  SELECT COUNT(*)::INT INTO __tiene_choque
    FROM trainingmmateluna.reserva r
   WHERE r.fecha = _fecha
     AND r.idhorario = _idhorario
     AND (_idreserva = 0 OR r.idreserva <> _idreserva);
  IF __tiene_choque > 0 THEN
    RAISE EXCEPTION 'FECHA Y HORARIO OCUPADOS';
  END IF;

  -- RUT CON OTRA RESERVA VIGENTE
  SELECT COUNT(*)::INT INTO __dup_rut
    FROM trainingmmateluna.reserva r
   WHERE r.rut = _rut
     AND r.fecha >= CURRENT_DATE
     AND (_idreserva = 0 OR r.idreserva <> _idreserva);
  IF __dup_rut > 0 THEN
    RAISE EXCEPTION 'YA EXISTE UNA RESERVA VIGENTE PARA ESTE RUT';
  END IF;

  __es_insert := (_idreserva = 0);

  IF __es_insert THEN
    INSERT INTO trainingmmateluna.reserva(
      rut, nombre, nombremascota, email,
      idregion, idcomuna, fecha, idhorario,
      recordatorio, web, tv, amigos
    ) VALUES (
      _rut, _nombre, _nombremascota, _email,
      _idregion, _idcomuna, _fecha, _idhorario,
      _recordatorio, _web, _tv, _amigos
    )
    RETURNING idreserva INTO idreserva;

    mensaje := 'INSERTADO';
    RETURN NEXT; RETURN;

  ELSE
    UPDATE trainingmmateluna.reserva
       SET rut           = _rut,
           nombre        = _nombre,
           nombremascota = _nombremascota,
           email         = _email,
           idregion      = _idregion,
           idcomuna      = _idcomuna,
           fecha         = _fecha,
           idhorario     = _idhorario,
           recordatorio  = _recordatorio,
           web           = _web,
           tv            = _tv,
           amigos        = _amigos
     WHERE idreserva = _idreserva
     RETURNING idreserva INTO idreserva;

    IF idreserva IS NULL THEN
      RAISE EXCEPTION 'NO SE ENCONTRÓ LA RESERVA A ACTUALIZAR';
    END IF;

    mensaje := 'ACTUALIZADO';
    RETURN NEXT; RETURN;
  END IF;
END;
$$;


-- ===========================================
-- VISTA: vw_reservas
-- Muestra la reserva con FECHA formateada y el TEXTO del horario.
-- ===========================================
DROP VIEW IF EXISTS trainingmmateluna.vw_reservas;

CREATE VIEW trainingmmateluna.vw_reservas AS
SELECT
  r.idreserva,
  r.nombre,
  r.nombremascota,
  r.recordatorio,
  TO_CHAR(r.fecha, 'DD-MM-YYYY') AS fecha,
  h.descripcion AS horario
FROM trainingmmateluna.reserva r
INNER JOIN trainingmmateluna.horario h
  ON h.idhorario = r.idhorario
ORDER BY r.idreserva DESC;

-- =========================================================
-- VISTA: vw_porcentaje_reservas
-- TOP 3 horarios más usados, con porcentaje del total.
-- =========================================================
DROP VIEW IF EXISTS trainingmmateluna.vw_porcentaje_reservas;

CREATE VIEW trainingmmateluna.vw_porcentaje_reservas AS
WITH tot AS (
  SELECT COUNT(*)::NUMERIC AS total
    FROM trainingmmateluna.reserva
),
acum AS (
  SELECT
    h.descripcion AS horario,
    COUNT(*)::INT AS cantidad
  FROM trainingmmateluna.reserva r
  INNER JOIN trainingmmateluna.horario h
    ON h.idhorario = r.idhorario
  GROUP BY h.descripcion
)
SELECT
  a.horario,
  a.cantidad,
  CASE
    WHEN t.total = 0 THEN 0
    ELSE ROUND((a.cantidad / t.total) * 100)
  END::INT AS porcentaje
FROM acum a
CROSS JOIN tot t
ORDER BY a.cantidad DESC, a.horario
LIMIT 3;
