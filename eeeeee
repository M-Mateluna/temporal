/* controlador.js — ClienteProveedor2 (Desis) */

let clienteproveedor;

window.onload = function () {
  // Asegura markup del Lightbox si tu build lo requiere (no rompe si no existe)
  if (typeof addLightboxMarkup === 'function') {
    addLightboxMarkup();
  }

  // Precargar Fecha/Hora si está vacío
  let fh = document.getElementById('fechahora');
  if (fh && !fh.value) {
    let d = new Date();
    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
    fh.value = d.toISOString().slice(0,16); // YYYY-MM-DDTHH:MM
  }

  // === Instancia y configuración del componente ===
  clienteproveedor = new ClienteProveedor2();

  // Ubicación donde dibuja Lupa / Crear / Borrar
  clienteproveedor.ubicacion = document.getElementById("divBuscador");

  // El campo que actúa como buscador
  clienteproveedor.elementoBuscador = "rut";

  // Campos donde volcar la data retornada
  clienteproveedor.elementos = {
    rut: document.getElementById("rut"),
    idclienteproveedor: document.getElementById("cliente2"),
    giro: document.getElementById("giro"),
    idusuario: document.getElementById("idusuario"),
    fechahora: document.getElementById("fechahora")
  };

  // Botones visibles
  clienteproveedor.creaBotonBuscar = true;
  clienteproveedor.creaBotonBorrar = true;
  clienteproveedor.creaBotonCrear  = true;

  // Filtro y títulos requeridos
  clienteproveedor.filtro = "cliente|vigente"; // solo clientes vigentes
  clienteproveedor.tituloGrilla = "Clientes vigentes facturando";

  // Forzar Lightbox y tamaño (antes de New)
  clienteproveedor.islightbox   = true;
  clienteproveedor.altoLightbox = 500;
  clienteproveedor.anchoLightbox= 800;

  // AfterEvent según origen (usa self.ultimoEvento como en Ejemplo 6)
  clienteproveedor.afterEvent = function (self) {
    // Garantiza fecha/hora si aún no existe
    try {
      let fh = self.elementos.fechahora || document.getElementById('fechahora');
      if (fh && !fh.value) {
        let d = new Date(); d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
        fh.value = d.toISOString().slice(0,16);
      }
    } catch(e){}

    if (self.ultimoEvento == "onkeypress") {
      // Deshabilitar ID Usuario y Giro
      self.elementos.idusuario.disabled = true;
      self.elementos.giro.disabled = true;

      MSGBOX.Abrir({
        titulo: 'AfterEvent',
        texto: 'Se ha desencadenado el evento <b>Onkeypress</b>, bloqueando <b>idusuario</b> y <b>giro</b>.',
        botonera: 1 // Aceptar
      });
    } else { // onclick
      // Deshabilitar Rut, Giro e Idusuario
      self.elementos.rut.disabled = true;
      self.elementos.giro.disabled = true;
      self.elementos.idusuario.disabled = true;

      MSGBOX.Abrir({
        titulo: 'AfterEvent',
        texto: 'Se ha desencadenado el evento <b>Onclick</b>, bloqueando <b>rut</b>, <b>giro</b> y <b>idusuario</b>.',
        botonera: 1
      });
    }
  };

  // Construye el componente (dibuja los íconos y habilita el flujo)
  clienteproveedor.New();
};
